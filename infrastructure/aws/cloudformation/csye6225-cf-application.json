{
    "Description" : "Application Stack",
    "AWSTemplateFormatVersion" : "2010-09-09",
    
    "Parameters" : {
      "stackname" : {
        "Description" : "Stack Name",
        "Type" : "String",
        "Default" : "stack01"
      },
      "dbsubnet" : {
        "Description" : "DB Subnet Group name",
        "Type" : "String"
      },
      "s3domain" : {
        "Description" : "S3 name",
        "Type" : "String"
      },
      "ec2Subnet" : {
        "Description" : "Subnet ID for EC2",
        "Type" : "String"
      },
      "ec2SecurityGroup" : {
        "Description" : "Resource ID for EC2 Security Group",
        "Type" : "String"
      },
      "dbSecurityGroupId" : {
        "Description" : "Resource ID for DB Security Group",
        "Type" : "String"
      },
      "iaminstance" : {
        "Description" : "Instance Profile Name for CodeDeploy to S3",
        "Type" : "String"
      }
    },
    "Resources": {
      "EC2Instance": {
        "Type": "AWS::EC2::Instance",
        "Properties": {
            "ImageId": "ami-9887c6e7",
            "InstanceType": "t2.micro",
            "DisableApiTermination": "False",
            "SecurityGroupIds": [{"Ref" : "ec2SecurityGroup"}],
            "KeyName": "csye6225keypair",
            "SubnetId": {"Ref": "ec2Subnet"},
            "Tenancy": "default",
            "IamInstanceProfile": {"Ref":"iaminstance"},
            "Tags": [{"Key" : "Name", "Value" : "MyEC2Instance"}],
            "BlockDeviceMappings" : [
            {
              "DeviceName" : "/dev/sda1",
              "Ebs" : {
                        "DeleteOnTermination": true,
                        "VolumeSize": 16,
                        "VolumeType": "gp2"
                      }
            }],
            "UserData": {
                "Fn::Base64": {
                    "Fn::Join": [
                        "",
                        [
                            "#!/bin/bash -xe \n",
                            "yum update -y \n",
                            "yum install java-1.8.0-openjdk -y\n",
                            "yum install ruby -y \n",
                            "yum install wget -y \n",
                            "yum install python -y \n",
                            "yum install unzip -y \n",
                            "curl --silent --location https://rpm.nodesource.com/setup_9.x | sudo bash - \n",
                            "yum install -y nodejs \n",
                            "yum groupinstall 'Development Tools' -y \n",
                            "npm install pm2 -g \n",  
                            "yum update -y \n",
                            "wget https://aws-codedeploy-us-east-1.s3.amazonaws.com/latest/install \n",
                            "chmod +x ./install \n",
                            "./install auto \n",
                            "service codedeploy-agent start \n",
                            "service codedeploy-agent status \n",
                            "echo NODE_ENV=Prod > /var/.env \n",
                            "echo DB_USER=csye6225master >> /var/.env \n",
                            "echo DB_PASS=csye6225password >> /var/.env \n",
                            "echo DB_PORT=3306 >> /var/.env \n",
                            "echo DB_NAME=csye6225 >> /var/.env \n",
                            {
                                "Fn::Join": [
                                    "",
                                    [
                                        "echo TOPIC_ARN=",
                                        {"Ref": "MySNSTopic"},
                                        " >> /var/.env \n"
                                    ]
                                ]
                            },
                            {
                                "Fn::Join": [
                                    "",
                                    [
                                        "echo EMAIL_SOURCE=noreply@",
                                        {"Ref" : "domainname"},
                                        " >> /var/.env \n"
                                    ]
                                ]
                            },
                            {
                                "Fn::Join": [
                                    "",
                                    [
                                        "echo DDB_TABLE=",
                                        {"Ref" : "stackname"},
                                        "-csye6225-dynamodb-table",
                                        " >> /var/.env \n"
                                    ]
                                ]
                            },
                            {
                                "Fn::Join": [
                                    "",
                                    [
                                        "echo BUCKET=",
                                        {"Ref" : "s3domain"},
                                        " >> /var/.env \n"
                                    ]
                                ]
                            },
                            {
                                "Fn::Join": [
                                    "",
                                    [
                                        "echo DB_HOST=",
                                        {
                                            "Fn::GetAtt": [
                                                "RDSDB",
                                                "Endpoint.Address"
                                            ]
                                        },
                                        " >> /var/.env \n"
                                    ]
                                ]
                            },
                            "echo [general] > /var/awslogs.conf \n",
                            "echo state_file = /var/awslogs/state/agent-state >> /var/awslogs.conf \n",
                            "echo [/var/log/messages] >> /var/awslogs.conf \n",
                            "echo file = /var/log/customlog.log >> /var/awslogs.conf \n",
                            "echo log_group_name = csye6225_fall2018  >> /var/awslogs.conf \n",
                            "echo log_stream_name = webapp >> /var/awslogs.conf \n",
                            "echo datetime_format = %b %d %H:%M:%S >> /var/awslogs.conf \n",
                            "wget https://s3.amazonaws.com/aws-cloudwatch/downloads/latest/awslogs-agent-setup.py \n",
                            "python awslogs-agent-setup.py -n -r us-east-1 -c /var/awslogs.conf\n",
                            "echo [Unit] > /var/awslogs.service \n",
                            "echo Description=CloudWatch Logs agent >> /var/awslogs.service \n",
                            "echo After=rc-local.service >> /var/awslogs.service \n",
                            "echo [Service] >> /var/awslogs.service \n",
                            "echo Type=simple >> /var/awslogs.service \n",
                            "echo Restart=always >> /var/awslogs.service \n",
                            "echo KillMode=process >> /var/awslogs.service \n",
                            "echo TimeoutSec=infinity >> /var/awslogs.service \n",
                            "echo PIDFILE=/var/awslogs/state/awslogs.pid >> /var/awslogs.service \n",
                            "echo ExecStart=/var/awslogs/bin/awslogs-agent-launcher.sh --start --background --pidfile '$PIDFILE' --user awslogs --chuid awslogs '&' >> /var/awslogs.service \n",
                            "echo [Install] >> /var/awslogs.service \n",
                            "echo WantedBy=multi-user.target >> /var/awslogs.service \n",
                            "mv /var/awslogs.service /etc/systemd/system \n",
                            "echo --Custom Log File-- > /var/log/customlog.log \n",
                            "chmod 777 /var/log/customlog.log \n",
                            "systemctl enable awslogs.service \n",
                            "systemctl start awslogs.service \n"                           
                        ]
                    ]
                }
            }
          },
          
          "DependsOn" : "RDSDB"
      },
      "S3" : {
      "Type" : "AWS::S3::Bucket",
      "Properties" : {
        "BucketName" : {"Ref" : "s3domain"}
      }
      },
      "DynamoDBTable": {
      "Type" : "AWS::DynamoDB::Table",
      "Properties" : {
        "AttributeDefinitions" : [ {"AttributeName" : "id", "AttributeType" : "S"}],
        "KeySchema" : [ {"AttributeName" : "id", "KeyType" : "HASH"} ],
        "ProvisionedThroughput" : {
          "ReadCapacityUnits" : 5,
          "WriteCapacityUnits" : 5
        },
        "TableName": {"Fn::Join" : ["",[{"Ref" : "stackname"},"-csye6225-dynamodb-table"]] }
      }
      },
      "RDSDB" :   {
        "Type" : "AWS::RDS::DBInstance",
        "Properties" :
          {
            "AllocatedStorage" : "5",
            "DBInstanceClass" : "db.t2.medium",
            "DBInstanceIdentifier" : {"Fn::Join" : ["",[{"Ref" : "stackname"},"-csye6225-RDS-DB"]] },
            "DBName" : "csye6225",
            "DBSubnetGroupName" :{"Ref" : "dbsubnet"},
            "Engine" : "mysql",
            "EngineVersion" : "5.6.37",
            "MasterUsername" : "csye6225master",
            "MasterUserPassword" : "csye6225password",
            "MultiAZ" : "false",
            "PubliclyAccessible" : "false",
            "VPCSecurityGroups": [{"Ref": "dbSecurityGroupId"}]
          }
      }
    },
    "MySNSTopic":{
        "Type":"AWS::SNS::Topic",
        "Properties":{
          "TopicName":"LambdaTopic",
          "Subscription":[
            {
              "Endpoint":{"Ref": "lambdaArn"}, "Protocol":"lambda"
            }
          ]
        }
      },
    "Outputs": {
        "InstanceId": {
            "Description": "InstanceId of the newly created EC2 instance",
            "Value": {
                "Ref": "EC2Instance"    
            }
        },
        "AZ": {
            "Description": "Availability Zone of the newly created EC2 instance",
            "Value": {
                "Fn::GetAtt": [
                    "EC2Instance",
                    "AvailabilityZone"
                ]
            }
        }
      }
    }