{
    "Description" : "Application Stack",
    "AWSTemplateFormatVersion" : "2010-09-09",
    
    "Parameters" : {
      "stackname" : {
        "Description" : "Stack Name",
        "Type" : "String",
        "Default" : "stack01"
      },
      "dbsubnet" : {
        "Description" : "DB Subnet Group name",
        "Type" : "String"
      },
      "vpc" : {
        "Description" : "VPC ID",
        "Type" : "String"
      },
      
      "s3domain" : {
        "Description" : "S3 name",
        "Type" : "String"
      },
      "ec2Subnet1" : {
        "Description" : "Subnet ID for EC2",
        "Type" : "String"
      },
      "ec2Subnet2" : {
        "Description" : "Subnet ID 2 for EC2",
        "Type" : "String"
      },
      "ec2Subnet3" : {
        "Description" : "Subnet ID 2 for EC2",
        "Type" : "String"
      },
      "ec2SecurityGroup" : {
        "Description" : "Resource ID for EC2 Security Group",
        "Type" : "String"
      },
      "dbSecurityGroupId" : {
        "Description" : "Resource ID for DB Security Group",
        "Type" : "String"
      },
      "iaminstance" : {
        "Description" : "Instance Profile Name for CodeDeploy to S3",
        "Type" : "String"
      },
      "domainname" : {
        "Description" : "Domain Name",
        "Type" : "String"
      },
      "snsTopicArn" : {
        "Description" : "SNS Topic ARN",
        "Type" : "String"
      },
      "sglb" : {
        "Description" : "Security Group Load Balancer",
        "Type" : "String"
      },
      "SSLArn" : {
        "Description" : "SSL Arn",
        "Type" : "String"   
      },
      "appname" : {
        "Description" : "Application Name",
        "Type" : "String"
    
      },
      "depname" : {
        "Description" : "Deployment Group Name",
        "Type" : "String"
    
      },
      "codeployRole" : {
        "Description" : "Application Name",
        "Type" : "String"
    
      }
    },
    "Resources": {
        "WebServerGroup" : {
            "Type" : "AWS::AutoScaling::AutoScalingGroup",
            "Properties" : {
              "VPCZoneIdentifier" : [{ "Ref" : "ec2Subnet1" }],
              "LaunchConfigurationName" : { "Ref" : "asglaunchconfig" },
              "MinSize" : "3",
              "MaxSize" : "10",
              "DesiredCapacity":"3",
              "Cooldown":"60",
              "Tags" : [ {
                "Key" : "Name",
                "Value" : "MyEC2Instance",
                "PropagateAtLaunch" : "true"
                } ],
               "TargetGroupARNs" : [ { "Ref" : "ALBTargetGroup" } ]            
                  }
                },            
          "asglaunchconfig" : {
            "Type" : "AWS::AutoScaling::LaunchConfiguration",
            "Properties" : {
              "KeyName" : "csye6225keypair",
              "ImageId" : "ami-9887c6e7",
              "SecurityGroups" : [ { "Ref" : "ec2SecurityGroup" } ],
              "InstanceType" : "t2.micro",
              "AssociatePublicIpAddress": false,
              "IamInstanceProfile": {"Ref":"iaminstance"},
              "BlockDeviceMappings" : [
                {
                  "DeviceName" : "/dev/sda1",
                  "Ebs" : {
                            "DeleteOnTermination": true,
                            "VolumeSize": 16,
                            "VolumeType": "gp2"
                          }
                }],
              "UserData"       : {
                "Fn::Base64": {
                    "Fn::Join": [
                        "",
                        [
                            "#!/bin/bash -xe \n",
                            "yum update -y \n",
                            "yum install java-1.8.0-openjdk -y\n",
                            "yum install ruby -y \n",
                            "yum install wget -y \n",
                            "yum install python -y \n",
                            "yum install unzip -y \n",
                            "curl --silent --location https://rpm.nodesource.com/setup_9.x | sudo bash - \n",
                            "yum install -y nodejs \n",
                            "yum groupinstall 'Development Tools' -y \n",
                            "npm install pm2 -g \n",  
                            "yum update -y \n",
                            "wget https://aws-codedeploy-us-east-1.s3.amazonaws.com/latest/install \n",
                            "chmod +x ./install \n",
                            "./install auto \n",
                            "service codedeploy-agent start \n",
                            "service codedeploy-agent status \n",
                            "echo NODE_ENV=Prod > /var/.env \n",
                            "echo DB_USER=csye6225master >> /var/.env \n",
                            "echo DB_PASS=csye6225password >> /var/.env \n",
                            "echo DB_PORT=3306 >> /var/.env \n",
                            "echo DB_NAME=csye6225 >> /var/.env \n",
                            {
                                "Fn::Join": [
                                    "",
                                    [
                                        "echo TOPIC_ARN=",
                                        {"Ref": "snsTopicArn"},
                                        " >> /var/.env \n"
                                    ]
                                ]
                            },
                            {
                              "Fn::Join": [
                                  "",
                                  [
                                      "echo DB_HOST=",
                                      {
                                          "Fn::GetAtt": [
                                              "RDSDB",
                                              "Endpoint.Address"
                                          ]
                                      },
                                      " >> /var/.env \n"
                                  ]
                              ]
                          },
                            {
                                "Fn::Join": [
                                    "",
                                    [
                                        "echo EMAIL_SOURCE=noreply@",
                                        {"Ref" : "domainname"},
                                        " >> /var/.env \n"
                                    ]
                                ]
                            },
                            {
                                "Fn::Join": [
                                    "",
                                    [
                                        "echo DDB_TABLE=",
                                        {"Ref" : "stackname"},
                                        "-csye6225-dynamodb-table",
                                        " >> /var/.env \n"
                                    ]
                                ]
                            },
                            {
                                "Fn::Join": [
                                    "",
                                    [
                                        "echo BUCKET=",
                                        {"Ref" : "s3domain"},
                                        " >> /var/.env \n"
                                    ]
                                ]
                            },
                            
                            "echo [general] > /var/awslogs.conf \n",
                            "echo state_file = /var/awslogs/state/agent-state >> /var/awslogs.conf \n",
                            "echo [/var/log/messages] >> /var/awslogs.conf \n",
                            "echo file = /var/log/customlog.log >> /var/awslogs.conf \n",
                            "echo log_group_name = csye6225_fall2018  >> /var/awslogs.conf \n",
                            "echo log_stream_name = webapp >> /var/awslogs.conf \n",
                            "echo datetime_format = %b %d %H:%M:%S >> /var/awslogs.conf \n",
                            "wget https://s3.amazonaws.com/aws-cloudwatch/downloads/latest/awslogs-agent-setup.py \n",
                            "python awslogs-agent-setup.py -n -r us-east-1 -c /var/awslogs.conf\n",
                            "echo [Unit] > /var/awslogs.service \n",
                            "echo Description=CloudWatch Logs agent >> /var/awslogs.service \n",
                            "echo After=rc-local.service >> /var/awslogs.service \n",
                            "echo [Service] >> /var/awslogs.service \n",
                            "echo Type=simple >> /var/awslogs.service \n",
                            "echo Restart=always >> /var/awslogs.service \n",
                            "echo KillMode=process >> /var/awslogs.service \n",
                            "echo TimeoutSec=infinity >> /var/awslogs.service \n",
                            "echo ExecStart=/var/awslogs/bin/awslogs-agent-launcher.sh --start --background --user awslogs --chuid awslogs '&' >> /var/awslogs.service \n",
                            "echo [Install] >> /var/awslogs.service \n",
                            "echo WantedBy=multi-user.target >> /var/awslogs.service \n",
                            "mv /var/awslogs.service /etc/systemd/system \n",
                            "echo --Custom Log File-- > /var/log/customlog.log \n",
                            "chmod 777 /var/log/customlog.log \n",
                            "systemctl enable awslogs.service \n",
                            "systemctl start awslogs.service \n",
                            "echo '{\"agent\": {\"metrics_collection_interval\": 10,\"logfile\": \"/var/logs/amazon-cloudwatch-agent.log\"},' > /opt/cloudwatch-config.json \n",
                            "echo '\"logs\": {\"logs_collected\": {\"files\": {\"collect_list\": [{\"file_path\": \"/var/log/customlog.log\",\"log_group_name\": \"csye6225_fall2018\",\"log_stream_name\": \"webapp\"}]}},' >> /opt/cloudwatch-config.json \n",
                            "echo '\"log_stream_name\": \"cloudwatch_log_stream\"},' >> /opt/cloudwatch-config.json \n",
                            "echo '\"metrics\":{\"metrics_collected\":{' >> /opt/cloudwatch-config.json \n",
                            "echo '\"statsd\":{' >> /opt/cloudwatch-config.json \n",    
                            "echo '\"service_address\":\":8125\",\"metrics_collection_interval\":10,\"metrics_aggregation_interval\":0}}}}' >> /opt/cloudwatch-config.json \n",
                            "wget https://s3.amazonaws.com/amazoncloudwatch-agent/centos/amd64/latest/amazon-cloudwatch-agent.rpm \n",
                            "sudo rpm -U ./amazon-cloudwatch-agent.rpm \n",
                            "sudo /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a fetch-config -m ec2 -c file:/opt/cloudwatch-config.json -s \n"
                        ]
                    ]
                }
            }
            },
            "DependsOn" : "RDSDB"
          },
          "RDSDB" :   {
            "Type" : "AWS::RDS::DBInstance",
            "Properties" :
              {
                "AllocatedStorage" : "5",
                "DBInstanceClass" : "db.t2.medium",
                "DBInstanceIdentifier" : {"Fn::Join" : ["",[{"Ref" : "stackname"},"-csye6225-RDS-DB"]] },
                "DBName" : "csye6225",
                "DBSubnetGroupName" :{"Ref" : "dbsubnet"},
                "Engine" : "mysql",
                "EngineVersion" : "5.6.37",
                "MasterUsername" : "csye6225master",
                "MasterUserPassword" : "csye6225password",
                "MultiAZ" : "false",
                "PubliclyAccessible" : "false",
                "VPCSecurityGroups": [{"Ref": "dbSecurityGroupId"}]
              }
          },                
          "WebServerScaleUpPolicy": {
            "Type": "AWS::AutoScaling::ScalingPolicy",
            "Properties": {
              "AdjustmentType": "ChangeInCapacity",
              "AutoScalingGroupName": {
                "Ref": "WebServerGroup"
              },
              "Cooldown": "60",
              "ScalingAdjustment": "1"
            }
          },
          "WebServerScaleDownPolicy": {
            "Type": "AWS::AutoScaling::ScalingPolicy",
            "Properties": {
              "AdjustmentType": "ChangeInCapacity",
              "AutoScalingGroupName": {
                "Ref": "WebServerGroup"
              },
              "Cooldown": "60",
              "ScalingAdjustment": "-1"
            }
          },
          "CPUAlarmHigh": {
            "Type": "AWS::CloudWatch::Alarm",
            "Properties": {
              "AlarmDescription": "Scale-up if CPU > 10% for 10 minutes",
              "MetricName": "CPUUtilization",
              "Namespace": "AWS/EC2",
              "Statistic": "Average",
              "Period": "300",
              "EvaluationPeriods": "2",
              "Threshold": "10",
              "AlarmActions": [
                {
                  "Ref": "WebServerScaleUpPolicy"
                }
              ],
              "Dimensions": [
                {
                  "Name": "AutoScalingGroupName",
                  "Value": {
                    "Ref": "WebServerGroup"
                  }
                }
              ],
              "ComparisonOperator": "GreaterThanThreshold"
            }
          },
          "CPUAlarmLow": {
            "Type": "AWS::CloudWatch::Alarm",
            "Properties": {
              "AlarmDescription": "Scale-down if CPU < 8% for 10 minutes",
              "MetricName": "CPUUtilization",
              "Namespace": "AWS/EC2",
              "Statistic": "Average",
              "Period": "300",
              "EvaluationPeriods": "2",
              "Threshold": "8",
              "AlarmActions": [
                {
                  "Ref": "WebServerScaleDownPolicy"
                }
              ],
              "Dimensions": [
                {
                  "Name": "AutoScalingGroupName",
                  "Value": {
                    "Ref": "WebServerGroup"
                  }
                }
              ],
              "ComparisonOperator": "LessThanThreshold"
            }
          },
          "ApplicationLoadBalancer" : {
            "Type" : "AWS::ElasticLoadBalancingV2::LoadBalancer",
            "Properties" : {
              "Name":"ApplicationLoadBalancer",
              "Subnets" : [{"Ref": "ec2Subnet1"},{"Ref": "ec2Subnet2"},{"Ref": "ec2Subnet3"}],
              "SecurityGroups": [{"Ref": "sglb"}]
            }
          },
          "ALBListener1" : {
            "Type" : "AWS::ElasticLoadBalancingV2::Listener",
            "Properties" : {
              "DefaultActions" : [{
                "Type" : "forward",
                "TargetGroupArn" : { "Ref" : "ALBTargetGroup" }
              }],
              "LoadBalancerArn" : { "Ref" : "ApplicationLoadBalancer" },
              "Port" : "80",
              "Protocol" : "HTTP"
            }
          },
          "ALBListener2" : {
            "Type" : "AWS::ElasticLoadBalancingV2::Listener",
            "Properties" : {
              "DefaultActions" : [{
                "Type" : "forward",
                "TargetGroupArn" : { "Ref" : "ALBTargetGroup" }
              }],
              "Certificates" : [{"CertificateArn":{"Ref" : "SSLArn"}}],
              "LoadBalancerArn" : { "Ref" : "ApplicationLoadBalancer" },
              "Port" : "443",
              "Protocol" : "HTTPS"
            }
          },
          "ALBTargetGroup" : {
            "Type" : "AWS::ElasticLoadBalancingV2::TargetGroup",
            "Properties" : {
              "Name" : "ALBTargetGroup",
              "HealthCheckIntervalSeconds" : 30,
              "HealthCheckTimeoutSeconds" : 10,
              "HealthyThresholdCount" : 4,
              "Port" : 3000,
              "Protocol" : "HTTP",
              "UnhealthyThresholdCount" : 5,
              "TargetGroupAttributes" : [
                  {"Key" : "stickiness.enabled","Value" : "true"}
              ],
              "VpcId" : {"Ref" : "vpc"}
            }
          },
    
      "S3" : {
      "Type" : "AWS::S3::Bucket",
      "Properties" : {
        "BucketName" : {"Ref" : "s3domain"}
      }
      },
      "DynamoDBTable": {
      "Type" : "AWS::DynamoDB::Table",
      "Properties" : {
        "AttributeDefinitions" : [ {"AttributeName" : "id", "AttributeType" : "S"}],
        "KeySchema" : [ {"AttributeName" : "id", "KeyType" : "HASH"} ],
        "ProvisionedThroughput" : {
          "ReadCapacityUnits" : 5,
          "WriteCapacityUnits" : 5
        },
        "TableName": {"Fn::Join" : ["",[{"Ref" : "stackname"},"-csye6225-dynamodb-table"]] }
        }
      },
      "CodeDeployApplication": {
        "Type": "AWS::CodeDeploy::Application",
        "Properties": {
          "ApplicationName" : {"Ref" : "appname"}
        }
      },
       "CodeDeployDeploymentGroup": {
        "Type": "AWS::CodeDeploy::DeploymentGroup",
        "Properties": {
          "ApplicationName" : {"Ref" : "appname"},
          "AutoScalingGroups" : [ {"Ref" : "WebServerGroup" } ],
          "Ec2TagFilters" : [{
            "Key" : "Name",
            "Value" : "MyEC2Instance",
            "Type" : "KEY_AND_VALUE"
          }],
          "LoadBalancerInfo": {
              "ElbInfoList": [{
                "Name": {"Fn::GetAtt": ["ApplicationLoadBalancer", "LoadBalancerName"]}
              }]
            },
          "ServiceRoleArn" : {"Ref" : "codeployRole"},
          "DeploymentGroupName" : {"Ref" : "depname"}
        }
      },  "MyRecordSet": {
        "Type": "AWS::Route53::RecordSet",
        "Properties": {
          "HostedZoneName" : {"Fn::Join" : ["",[{"Ref" : "domainname"},"."]] },
          "Name": {"Fn::Join" : ["",["www.",{"Ref" : "domainname"},"."]] },
          "Type": "A",
          "AliasTarget": {
              "HostedZoneId" : {"Fn::GetAtt": ["ApplicationLoadBalancer", "CanonicalHostedZoneID"]},
              "DNSName": {"Fn::GetAtt": ["ApplicationLoadBalancer", "DNSName"]},
              "EvaluateTargetHealth": "false"
          }
        }
      }
    },
    "Outputs": {
      "URL" : {
        "Description" : "The URL of the website",
        "Value" :  { "Fn::Join" : [ "", [ "http://", { "Fn::GetAtt" : [
            "ApplicationLoadBalancer", "DNSName" ]}]]}
      }
    }
}