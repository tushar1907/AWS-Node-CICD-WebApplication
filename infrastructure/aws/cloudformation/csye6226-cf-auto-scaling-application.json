{
    "Description" : "Application Stack",
    "AWSTemplateFormatVersion" : "2010-09-09",
    
    "Parameters" : {
      "stackname" : {
        "Description" : "Stack Name",
        "Type" : "String",
        "Default" : "stack01"
      },
      "dbsubnet" : {
        "Description" : "DB Subnet Group name",
        "Type" : "String"
      },
      "s3domain" : {
        "Description" : "S3 name",
        "Type" : "String"
      },
      "ec2Subnet" : {
        "Description" : "Subnet ID for EC2",
        "Type" : "String"
      },
      "ec2SecurityGroup" : {
        "Description" : "Resource ID for EC2 Security Group",
        "Type" : "String"
      },
      "dbSecurityGroupId" : {
        "Description" : "Resource ID for DB Security Group",
        "Type" : "String"
      },
      "iaminstance" : {
        "Description" : "Instance Profile Name for CodeDeploy to S3",
        "Type" : "String"
      },
      "domainname" : {
        "Description" : "Domain Name",
        "Type" : "String"
      },
      "snsTopicArn" : {
        "Description" : "SNS Topic ARN",
        "Type" : "String"
      }
    },
    "Resources": {
        "WebServerGroup" : {
            "Type" : "AWS::AutoScaling::AutoScalingGroup",
            "Properties" : {
              "VPCZoneIdentifier" : { "Ref" : "Subnets" },
              "LaunchConfigurationName" : { "Ref" : "LaunchConfig" },
              "MinSize" : "1",
              "MaxSize" : "3",
              "TargetGroupARNs" : [ { "Ref" : "ALBTargetGroup" } ],
              "NotificationConfiguration" : {
                "TopicARN" : { "Ref" : "NotificationTopic" },
                "NotificationTypes" : [ "autoscaling:EC2_INSTANCE_LAUNCH",
                                        "autoscaling:EC2_INSTANCE_LAUNCH_ERROR",
                                        "autoscaling:EC2_INSTANCE_TERMINATE",
                                        "autoscaling:EC2_INSTANCE_TERMINATE_ERROR"]
              }
            },
            "CreationPolicy" : {
              "ResourceSignal" : {
                "Timeout" : "PT15M",
                "Count"   : "1"
              }
            },
            "UpdatePolicy": {
              "AutoScalingRollingUpdate": {
                "MinInstancesInService": "1",
                "MaxBatchSize": "1",
                "PauseTime" : "PT15M",
                "WaitOnResourceSignals": "true"
              }
            }
          },
      
          "LaunchConfig" : {
            "Type" : "AWS::AutoScaling::LaunchConfiguration",
            "Metadata" : {
              "Comment" : "Install a simple application",
              "AWS::CloudFormation::Init" : {
                "config" : {
                  "packages" : {
                    "yum" : {
                      "httpd" : []
                    }
                  },
      
                  "files" : {
                    "/var/www/html/index.html" : {
                      "content" : { "Fn::Join" : ["\n", [
                        "<img src=\"", {"Fn::FindInMap" : ["Region2Examples", {"Ref" : "AWS::Region"}, "Examples"]}, "/cloudformation_graphic.png\" alt=\"AWS CloudFormation Logo\"/>",
                        "<h1>Congratulations, you have successfully launched the AWS CloudFormation sample.</h1>"
                      ]]},
                      "mode"    : "000644",
                      "owner"   : "root",
                      "group"   : "root"
                    },
      
                    "/etc/cfn/cfn-hup.conf" : {
                      "content" : { "Fn::Join" : ["", [
                        "[main]\n",
                        "stack=", { "Ref" : "AWS::StackId" }, "\n",
                        "region=", { "Ref" : "AWS::Region" }, "\n"
                      ]]},
                      "mode"    : "000400",
                      "owner"   : "root",
                      "group"   : "root"
                    },
      
                    "/etc/cfn/hooks.d/cfn-auto-reloader.conf" : {
                      "content": { "Fn::Join" : ["", [
                        "[cfn-auto-reloader-hook]\n",
                        "triggers=post.update\n",
                        "path=Resources.LaunchConfig.Metadata.AWS::CloudFormation::Init\n",
                        "action=/opt/aws/bin/cfn-init -v ",
                        "         --stack ", { "Ref" : "AWS::StackName" },
                        "         --resource LaunchConfig ",
                        "         --region ", { "Ref" : "AWS::Region" }, "\n",
                        "runas=root\n"
                      ]]},
              "mode"    : "000400",
              "owner"   : "root",
                      "group"   : "root"
                    }
                  },
      
                  "services" : {
                    "sysvinit" : {
                      "httpd"    : { "enabled" : "true", "ensureRunning" : "true" },
                      "cfn-hup" : { "enabled" : "true", "ensureRunning" : "true",
                                    "files" : ["/etc/cfn/cfn-hup.conf", "/etc/cfn/hooks.d/cfn-auto-reloader.conf"]}
                    }
                  }
                }
              }
            },
            "Properties" : {
              "KeyName" : { "Ref" : "KeyName" },
              "ImageId" : { "Fn::FindInMap" : [ "AWSRegionArch2AMI", { "Ref" : "AWS::Region" },
                                                { "Fn::FindInMap" : [ "AWSInstanceType2Arch", { "Ref" : "InstanceType" }, "Arch" ] } ] },
              "SecurityGroups" : [ { "Ref" : "InstanceSecurityGroup" } ],
              "InstanceType" : { "Ref" : "InstanceType" },
              "UserData"       : { "Fn::Base64" : { "Fn::Join" : ["", [
                   "#!/bin/bash -xe\n",
                   "yum update -y aws-cfn-bootstrap\n",
      
                   "yum update -y aws-cli\n",
      
                   "/opt/aws/bin/cfn-init -v ",
                   "         --stack ", { "Ref" : "AWS::StackName" },
                   "         --resource LaunchConfig ",
                   "         --region ", { "Ref" : "AWS::Region" }, "\n",
      
                   "/opt/aws/bin/cfn-signal -e $? ",
                   "         --stack ", { "Ref" : "AWS::StackName" },
                   "         --resource WebServerGroup ",
                   "         --region ", { "Ref" : "AWS::Region" }, "\n"
              ]]}}
            }
          },
      "S3" : {
      "Type" : "AWS::S3::Bucket",
      "Properties" : {
        "BucketName" : {"Ref" : "s3domain"}
      }
      },
      "DynamoDBTable": {
      "Type" : "AWS::DynamoDB::Table",
      "Properties" : {
        "AttributeDefinitions" : [ {"AttributeName" : "id", "AttributeType" : "S"}],
        "KeySchema" : [ {"AttributeName" : "id", "KeyType" : "HASH"} ],
        "ProvisionedThroughput" : {
          "ReadCapacityUnits" : 5,
          "WriteCapacityUnits" : 5
        },
        "TableName": {"Fn::Join" : ["",[{"Ref" : "stackname"},"-csye6225-dynamodb-table"]] }
      }
      },
      "RDSDB" :   {
        "Type" : "AWS::RDS::DBInstance",
        "Properties" :
          {
            "AllocatedStorage" : "5",
            "DBInstanceClass" : "db.t2.medium",
            "DBInstanceIdentifier" : {"Fn::Join" : ["",[{"Ref" : "stackname"},"-csye6225-RDS-DB"]] },
            "DBName" : "csye6225",
            "DBSubnetGroupName" :{"Ref" : "dbsubnet"},
            "Engine" : "mysql",
            "EngineVersion" : "5.6.37",
            "MasterUsername" : "csye6225master",
            "MasterUserPassword" : "csye6225password",
            "MultiAZ" : "false",
            "PubliclyAccessible" : "false",
            "VPCSecurityGroups": [{"Ref": "dbSecurityGroupId"}]
          }
      }
   
},  
    "Outputs": {
        "InstanceId": {
            "Description": "InstanceId of the newly created EC2 instance",
            "Value": {
                "Ref": "EC2Instance"    
            }
        },
        "AZ": {
            "Description": "Availability Zone of the newly created EC2 instance",
            "Value": {
                "Fn::GetAtt": [
                    "EC2Instance",
                    "AvailabilityZone"
                ]
            }
        }
      }
    }